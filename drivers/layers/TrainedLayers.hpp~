/* this is C++ */
#include <string>
#include <vector>
struct Layer {
  std::string name;
  std::vector<size_t> weightsShape;
  std::vector<int8_t> weights;
  size_t nBiases;
  std::vector<int8_t> biases;
  Layer(const std::string& name, const std::string& wshape, const std::string& weights, unsigned int nBias, const std::string& bias):
    name(name), nBiases(nBias) 
  {
    std::stringstream ss(wshape);
    weightsShape.append(std::istream_iterator<size_t>(ss),    
			std::istream_iterator<size_t>());
    ss=weights;
    //FIXME file should contain ints
    weights.append(std::istream_iterator<float>(ss),    
		   std::istream_iterator<float>());
    ss=biases;
    //FIXME file should contain ints
    biases.append(std::istream_iterator<float>(ss),    
		  std::istream_iterator<float>());
  }
};

typedef std::vector<Layer> Layers_t;

void readLayersFlatFile(const std::string& path, Layers_t& layers) {
    std::ifstream file;
    file.open(path, std::ios::in | std::ios::binary | std::ios::ate);

    if (!file) {
        std::cerr << "Error opening file at " << path << std::endl;
        return;
    }

    while (file.good()) {
      std::string name, wshape, weights, nBias, biases;
      std::getline(file, name);
      if (!file.good()) break;
      std::getline(file, wshape);
      if (!file.good()) break;
      std::getline(file, weights);
      if (!file.good()) break;
      nBias << file;
      if (!file.good()) break;
      std::getline(file, biases);
      if (!file.good()) break;
      layers.push_back(Layer(name, wshape, weights, nBias, biases));
      //read separator
      std::string emptyLine;
      std::getline(file, emptyLine);
      if (!file.good() || !emptyLine.empty() ) break;
    }
    return;
}
